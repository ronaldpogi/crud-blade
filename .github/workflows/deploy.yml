name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      EC2_USER: ubuntu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        run: |
          docker build \
            --build-arg APP_ENV=production \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest \
            .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/crud-app:latest

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key

      - name: Copy deployment files
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2.key ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/crud/docker/nginx && rm -rf ~/crud/public"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2.key docker-compose.prod.yml ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:~/crud/docker-compose.prod.yml
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2.key docker/nginx/default.conf ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:~/crud/docker/nginx/default.conf
          scp -r -o StrictHostKeyChecking=no -i ~/.ssh/ec2.key public ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:~/crud/

      - name: Deploy on EC2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2.key ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
            set -e
            export DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME}"
            export DOCKERHUB_TOKEN="${DOCKERHUB_TOKEN}"
            cd ~/crud
            if [ ! -f docker/.env.production ]; then
              echo "Missing docker/.env.production on server" >&2
              exit 1
            fi
            echo "\$DOCKERHUB_TOKEN" | docker login -u "\$DOCKERHUB_USERNAME" --password-stdin
            DOCKERHUB_USERNAME="\$DOCKERHUB_USERNAME" docker compose -f docker-compose.prod.yml pull
            DOCKERHUB_USERNAME="\$DOCKERHUB_USERNAME" docker compose -f docker-compose.prod.yml up -d --remove-orphans
            # Wait for MySQL to accept connections before running migrations
            ready=0
            for i in \$(seq 1 10); do
              if DOCKERHUB_USERNAME="\$DOCKERHUB_USERNAME" docker compose -f docker-compose.prod.yml exec -T mysql sh -c 'mysqladmin ping -h 127.0.0.1 -uroot -p"$MYSQL_ROOT_PASSWORD" --silent'; then
                ready=1
                break
              fi
              echo "MySQL not ready yet, retrying (\$i/10)..."
              sleep 5
            done
            if [ "\$ready" -ne 1 ]; then
              echo "MySQL did not become ready in time" >&2
              exit 1
            fi
            DOCKERHUB_USERNAME="\$DOCKERHUB_USERNAME" docker compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
          EOF
